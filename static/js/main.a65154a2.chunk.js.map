{"version":3,"sources":["components/Form.js","components/Info.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Form","onSubmit","this","props","weatherMethod","className","type","name","placeholder","React","Component","Info","Weather","city","country","temp","pressure","sunset","error","API_KEY","App","state","undefined","sunrise","gettingWeather","e","a","preventDefault","target","elements","value","fetch","api_url","json","data","sys","date","Date","setTime","sunset_date","getHours","getMinutes","getSeconds","setState","main","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"sRAceA,G,4KATX,OACI,0BAAMC,SAAUC,KAAKC,MAAMC,cAAeC,UAAU,gBAClD,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,mCAC3C,kH,GALSC,IAAMC,YCWVC,E,uKATX,OACE,yBAAKN,UAAU,gBACb,6IACA,8L,GALWI,IAAMC,WCiBVE,EAhBC,SAACT,GACf,OACE,oCACEA,EAAMU,MACJ,6BACE,oHAAoBV,EAAMU,KAA1B,KAAkCV,EAAMW,SACxC,wGAAkBX,EAAMY,MACxB,gFAAcZ,EAAMa,UACpB,mGAAkBb,EAAMc,SAGzBd,EAAMe,OAAS,2BAAIf,EAAMe,SCT5BC,EAAU,mCAiEDC,E,4MA7DbC,MAAQ,CACNN,UAAMO,EACNT,UAAMS,EACNR,aAASQ,EACTC,aAASD,EACTL,YAAQK,EACRJ,WAAOI,G,EAGTE,e,uCAAkB,WAAOC,GAAP,yBAAAC,EAAA,yDAChBD,EAAEE,mBACId,EAAOY,EAAEG,OAAOC,SAAShB,KAAKiB,OAFpB,iCAKQC,MAAM,qDAAD,OAAsDlB,EAAtD,kBAAoEM,EAApE,kBALb,cAKRa,EALQ,gBAMKA,EAAQC,OANb,OAMRC,EANQ,OAQVjB,EAASiB,EAAKC,IAAIlB,QAClBmB,EAAO,IAAIC,MACVC,QAAQrB,GACTsB,EAAcH,EAAKI,WAAa,IAAMJ,EAAKK,aAAe,IAAML,EAAKM,aAEzE,EAAKC,SAAS,CACZ5B,KAAMmB,EAAKU,KAAK7B,KAChBF,KAAMqB,EAAK3B,KACXO,QAASoB,EAAKC,IAAIrB,QAClBE,SAAUkB,EAAKU,KAAK5B,SACpBC,OAAQsB,EACRrB,WAAOI,IAnBK,wBAsBhB,EAAKqB,SAAS,CACZ5B,UAAMO,EACNT,UAAMS,EACNR,aAASQ,EACTC,aAASD,EACTL,YAAQK,EACRJ,MAAO,qIA5BO,4C,6GAkChB,OACE,yBAAKb,UAAU,WACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAMD,cAAeF,KAAKsB,iBAC1B,kBAAC,EAAD,CACAT,KAAMb,KAAKmB,MAAMN,KACjBF,KAAMX,KAAKmB,MAAMR,KACjBC,QAASZ,KAAKmB,MAAMP,QACpBE,SAAUd,KAAKmB,MAAML,SACrBC,OAAQf,KAAKmB,MAAMJ,OACnBC,MAAOhB,KAAKmB,MAAMH,a,GAvDRT,IAAMC,WCIJmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA3C,GACL4C,QAAQ5C,MAAMA,EAAM6C,a","file":"static/js/main.a65154a2.chunk.js","sourcesContent":["import React from 'react';\n\n\nclass Form extends React.Component {\n  render() {\n    return(\n        <form onSubmit={this.props.weatherMethod} className='section_wrap'>\n          <input type='text' name='city' placeholder='Город'/>\n          <button>Узнать погоду</button>\n        </form>\n    )\n  }\n}\n\nexport default Form;","import React from 'react';\n\n\nclass Info extends React.Component {\n  render() {\n    return(\n      <div className='section_wrap'>\n        <h2 >Погодное приложение</h2>\n        <p>Узнайте погоду в вашем городе</p>\n      </div>\n    )\n  }\n}\n\nexport default Info;","import React from 'react';\n\n\n\nconst Weather = (props) => {\n  return(\n    <>\n     {props.city &&\n        <div>\n          <p>Местоположение: {props.city}, {props.country}</p>\n          <p>Темперартура: {props.temp}</p>\n          <p>Давление: {props.pressure}</p>\n          <p>Заход солнца: {props.sunset}</p>\n        </div>\n        }\n        {props.error && <p>{props.error}</p>}\n    </>\n  )\n}\n\nexport default Weather;","import React from 'react';\nimport './App.css';\nimport Form from './components/Form';\nimport Info from './components/Info';\nimport Weather from './components/Weather';\n\nconst API_KEY = '61060e12fb0079077c3ec998478d2a11'\n\nclass App extends React.Component {\n\n  state = {\n    temp: undefined,\n    city: undefined,\n    country: undefined,\n    sunrise: undefined,\n    sunset: undefined,\n    error: undefined,\n  }\n\n  gettingWeather =  async (e) => {\n    e.preventDefault();\n    const city = e.target.elements.city.value\n    \n    if(city){\n      const api_url = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`)\n      const data = await api_url.json();\n\n      let sunset = data.sys.sunset;\n      let date = new Date();\n      date.setTime(sunset);\n      let sunset_date = date.getHours() + ':' + date.getMinutes() + \":\" + date.getSeconds();\n\n      this.setState({\n        temp: data.main.temp,\n        city: data.name,\n        country: data.sys.country,\n        pressure: data.main.pressure,\n        sunset: sunset_date,\n        error: undefined,\n    });\n  }else{\n    this.setState({\n      temp: undefined,\n      city: undefined,\n      country: undefined,\n      sunrise: undefined,\n      sunset: undefined,\n      error: 'Введите название города',\n    })\n  }\n\n    }\n  render(){\n    return(\n      <div className='wrapper'>\n        <Info />\n        <Form weatherMethod={this.gettingWeather}/>\n        <Weather\n        temp={this.state.temp}\n        city={this.state.city}\n        country={this.state.country}\n        pressure={this.state.pressure}\n        sunset={this.state.sunset}\n        error={this.state.error}\n        />\n        \n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './App.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}